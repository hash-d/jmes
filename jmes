#!/usr/bin/env python

import jmespath
import io
import csv
import sys
import json
import yaml
import tomlkit
import getopt
import tempfile
import subprocess
from pprint import pprint
from tabulate import tabulate


def usage():
    print("""
usage: jmes [-yYjJh] [ JMES-Expression [ /path/to/file ] ]

    -c  consider input as CSV
    -C  emit output as CSV (the result must be a list of dicts)
    -j  consider input as JSON
    -J  emit output as JSON
    -r  do not run `| less` on the output
    -R  raw output
    -t  consider input as TOML  (under construction)
    -T  emit output as TOML     (under construction)
    -y  consider input as YAML
    -Y  emit output as YAML

    -h  this help screen

    --raw-format=fmt  uses fmt to format the raw output
    --table           emit output as a table

If no -j or -y given, the script will try to guess the file's format, first by
its filename, then by its contents (first byte is checked for being [ or { and
considered to be JSON, otherwise YAML)

If a JMES-Expression is not given, it is assumed to be "@", which returns the
input as-is.  Use it to transform from JSON to YAML and the other way around,
or to just run 'jq -C | less -r' and get a color, pretty- printed output on
less.

To transform a file from one format to the other:

cat file_path | jmes -jY
cat file_path | jmes -yJ

or

jmes -jY "@" file_path
jmes -yJ "@" file_path

Here "@" stands for JMESPath "current-node", and just passes its input to the
output.
""", file=sys.stderr)


def raw_dump(result, raw_format=""):
    """
    Returns a 'raw' string representation of the result:

    - If it is a string, return it as is
    - If iterable, each item in a line
    - Otherwise, return it as-is

    In all options, a raw_format can be provided, which will be used to
    format the whole result or each of its items (for iterables)
    """
    ret = io.StringIO()
    if type(result) == str:
        ret.write(f"{result:{raw_format}}\n")
    else:
        try:
            for item in result:
                ret.write(f"{item:{raw_format}}\n")
        except TypeError as e:
            ret.write(f"{result:{raw_format}}\n")
        except Exception as e:
            print(e)
            raise e

    return ret.getvalue()


if __name__ == "__main__":

    # input and output formats (json or yaml)
    in_f = ""
    out_f = ""
    filename = ""
    do_less = True
    raw_format = ""

    opts, args = getopt.getopt(
        sys.argv[1:],
        "cChyjYJtTrR",
        [
            "raw-format=",
            "table",
        ],
    )

    for o, a in opts:
        if o == "-y":
            in_f = "yaml"
        elif o == "-Y":
            out_f = "yaml"
        elif o == "-r":
            do_less = False
        elif o == "-R":
            out_f = "raw"
        elif o == "-c":
            in_f = "csv"
        elif o == "-C":
            out_f = "csv"
        elif o == "-t":
            in_f = "toml"
        elif o == "-T":
            out_f = "toml"
        elif o == "-j":
            in_f = "json"
        elif o == "-J":
            out_f = "json"
        elif o == "--table":
            out_f = "table"
        elif o == "--raw-format":
            raw_format = a
            out_f = "raw"
        elif o == "-h":
            usage()
            sys.exit(0)
        else:
            print(f"jmes: unknown option {o}", file=sys.stderr)
            usage()
            sys.exit(1)

    if len(args) > 2:
        usage()
        sys.exit(1)

    try:
        expression = args[0]
    except IndexError:
        expression = "@"

    # Get thetext
    try:
        filename = args[1]
        if filename == "-":
            text = sys.stdin.read()
        else:
            with open(filename) as f:
                text = f.read()
    except IndexError:
        text = sys.stdin.read()

    # Guess the input format, if not given
    # TODO: if not provided, what about trying one, then the other, like Ansible does?
    if in_f == "":
        print(f"You didn't tell me what kind of file it is; I'll try to guess", file=sys.stderr)
        if filename.lower().endswith(".yaml") or filename.lower().endswith("yml"):
            in_f = "yaml"
            how = "from the file extension"
        elif filename.lower().endswith(".json"):
            in_f = "json"
            how = "from the file extension"
        elif filename.lower().endswith(".toml"):
            in_f = "toml"
            how = "from the file extension"
        elif filename.lower().endswith(".csv"):
            in_f = "csv"
            how = "from the file extension"
        elif len(text) == 0:
            raise Exception("Empty text; nothing to do here")
        elif text[0] in ["{", "["]:
            in_f = "json"
            how = "from the first character"
        else:
            in_f = "yaml"
            how = "as a fallback"
        print(f"I guessed {in_f} {how}", file=sys.stderr)

    # If not specifically requested, we output in the same format as the input
    if out_f == "":
        out_f = in_f

    if in_f == "json":
        data = json.loads(text)
    elif in_f == "yaml":
        data = yaml.safe_load(text)
    elif in_f == "toml":
        data = tomlkit.parse(text)
    elif in_f == "csv":
        with io.StringIO(text) as ios:
            dialect = 'excel'
            try:
                dialect = csv.Sniffer().sniff(ios.read(1024))
            except:
                # If we cannot determine the dialect, let's go with the default
                pass
            ios.seek(0)
            reader = csv.DictReader(ios, dialect=dialect)
            data = []
            for row in reader:
                data.append(row)
    else:
        raise Exception("This should not have happened")

    result = jmespath.search(expression, data)

    out_file = sys.stdout

    if out_f == "json":
        out_content = json.dumps(result, indent=2)
    elif out_f == "yaml":
        out_content = yaml.dump(result)
    elif out_f == "toml":
        out_content = tomlkit.dumps(result)
    elif out_f == "raw":
        out_content = raw_dump(result, raw_format)
    elif out_f == "table":
        out_content = tabulate(result, headers="keys", showindex=True)
    elif out_f == "csv":
        with io.StringIO() as ios:
            fields = set()
            try:
                for item in result:
                    fields = fields.union(item.keys())
            except AttributeError as e:
                raise Exception(
                    "Result for CSV output must be list of dictionaries")
            writer = csv.DictWriter(ios, fieldnames=fields)
            writer.writeheader()
            for item in result:
                writer.writerow(item)

            out_content = ios.getvalue()
    else:
        raise Exception("This should not have happened")

    if sys.stdout.isatty():
        with tempfile.NamedTemporaryFile("w") as out:
            # print(out_content, file=out)
            out.write(out_content)
            out.flush()
            if out_f == "json" and do_less:
                p = subprocess.Popen(
                    f"jq -C . {out.name} | less -r", shell=True)
            else:
                out_cmd = "cat"
                if do_less:
                    out_cmd = "less"
                p = subprocess.Popen(f"{out_cmd} {out.name}", shell=True)
            p.wait()
    else:
        print(out_content)
    print("", file=sys.stderr)
